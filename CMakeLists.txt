# Main CMake file for NativeSolid project

PROJECT(NativeSolid)
CMAKE_MINIMUM_REQUIRED(VERSION 2.6)

SET(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/../bin CACHE PATH
                        "Single output directory for building all libraries.")
SET(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR}/../bin CACHE PATH
                        "Single output directory for building all executables.")

set(CMAKE_MACOSX_RPATH ON)
set(CMAKE_SKIP_BUILD_RPATH FALSE)
set(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE)

MARK_AS_ADVANCED(LIBRARY_OUTPUT_PATH EXECUTABLE_OUTPUT_PATH)

if( NOT CMAKE_BUILD_TYPE )
  set( CMAKE_BUILD_TYPE Release CACHE STRING
       "Choose the type of build, options are: None Debug Release RelWithDebInfo
MinSizeRel."
       FORCE )
endif()

LIST(APPEND CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/CMake")


# -- CBLAS/LAPACKE --
FIND_PACKAGE(LAPACKE REQUIRED)
    MESSAGE(STATUS "LAPACKE_LIBRARIES=${LAPACKE_LIBRARIES}")  
    MESSAGE(STATUS "LAPACKE_LINKER_FLAGS=${LAPACKE_LINKER_FLAGS}")  
    MESSAGE(STATUS "CBLA_VENDOR=${CBLA_VENDOR}")  
    MESSAGE(STATUS "CBLA_STATIC=${CBLA_STATIC}") 
FIND_PATH(LAPACKE_LIB_PATH 
             NAMES lapacke.so
             DOC "LAPACKE library path"
            )
FIND_PATH(LAPACKE_INCLUDE_PATH 
             NAMES  lapacke.h
             DOC "LAPACKE include path"
            )

FIND_PACKAGE(CBLAS REQUIRED)
    MESSAGE(STATUS "CBLAS_LIBRARIES=${CBLAS_LIBRARIES}")  
    MESSAGE(STATUS "CBLAS_LINKER_FLAGS=${CBLAS_LINKER_FLAGS}")  
    MESSAGE(STATUS "CBLA_VENDOR=${CBLA_VENDOR}")  
    MESSAGE(STATUS "CBLA_STATIC=${CBLA_STATIC}") 
FIND_PATH(CBLAS_LIB_PATH 
             NAMES cblas.a
             DOC "CBLAS library path"
            )
FIND_PATH(LAPACKE_INCLUDE_PATH 
             NAMES  cblas.h
             DOC "CBLAS include path"
            )

INCLUDE_DIRECTORIES( ${LAPACKE_INCLUDE_PATH} ${CBLAS_INCLUDE_PATH})
LINK_DIRECTORIES(${LAPACKE_LIB_PATH} ${CBLAS_LIB_PATH})

# -- Python --
FIND_PACKAGE(PythonLibs REQUIRED)
    MESSAGE(STATUS "PYTHON_INCLUDE_PATH=${PYTHON_INCLUDE_PATH}") 


# -- SWIG --
FIND_PACKAGE(SWIG REQUIRED)
SET(CMAKE_SWIG_OUTDIR "${EXECUTABLE_OUTPUT_PATH}")

ADD_DEFINITIONS(-std=c++11)

# -- Sub directories
ADD_SUBDIRECTORY( src )
ADD_SUBDIRECTORY( _api )

